// Copyright 1998-2014 Epic Games, Inc. All Rights Reserved.
/*===========================================================================
	C++ class header boilerplate exported from UnrealHeaderTool.
	This is automatically generated by the tools.
	DO NOT modify this manually! Edit the corresponding .h files instead!
===========================================================================*/

#include "ObjectBase.h"

#ifdef MOVEPLUGIN_MovePlayerController_generated_h
#error "MovePlayerController.generated.h already included, missing '#pragma once' in MovePlayerController.h"
#endif
#define MOVEPLUGIN_MovePlayerController_generated_h

extern MOVEPLUGIN_API FName MOVEPLUGIN_MoveAnyButtonPressed;
extern MOVEPLUGIN_API FName MOVEPLUGIN_MoveB1Pressed;
extern MOVEPLUGIN_API FName MOVEPLUGIN_MoveB1Released;
extern MOVEPLUGIN_API FName MOVEPLUGIN_MoveB2Pressed;
extern MOVEPLUGIN_API FName MOVEPLUGIN_MoveB2Released;
extern MOVEPLUGIN_API FName MOVEPLUGIN_MoveB3Pressed;
extern MOVEPLUGIN_API FName MOVEPLUGIN_MoveB3Released;
extern MOVEPLUGIN_API FName MOVEPLUGIN_MoveB4Pressed;
extern MOVEPLUGIN_API FName MOVEPLUGIN_MoveB4Released;
extern MOVEPLUGIN_API FName MOVEPLUGIN_MoveControllerDisabled;
extern MOVEPLUGIN_API FName MOVEPLUGIN_MoveControllerEnabled;
extern MOVEPLUGIN_API FName MOVEPLUGIN_MoveControllerMoved;
extern MOVEPLUGIN_API FName MOVEPLUGIN_MoveDocked;
extern MOVEPLUGIN_API FName MOVEPLUGIN_MovePluggedIn;
extern MOVEPLUGIN_API FName MOVEPLUGIN_MoveStartPressed;
extern MOVEPLUGIN_API FName MOVEPLUGIN_MoveStartReleased;
extern MOVEPLUGIN_API FName MOVEPLUGIN_MoveTriggerChanged;
extern MOVEPLUGIN_API FName MOVEPLUGIN_MoveTriggerPressed;
extern MOVEPLUGIN_API FName MOVEPLUGIN_MoveTriggerReleased;
extern MOVEPLUGIN_API FName MOVEPLUGIN_MoveUndocked;
extern MOVEPLUGIN_API FName MOVEPLUGIN_MoveUnplugged;
#define AMovePlayerController_EVENTPARMS \
struct MovePlayerController_eventMoveAnyButtonPressed_Parms \
{ \
	int32 Controller; \
}; \
struct MovePlayerController_eventMoveB1Pressed_Parms \
{ \
	int32 Controller; \
}; \
struct MovePlayerController_eventMoveB1Released_Parms \
{ \
	int32 Controller; \
}; \
struct MovePlayerController_eventMoveB2Pressed_Parms \
{ \
	int32 Controller; \
}; \
struct MovePlayerController_eventMoveB2Released_Parms \
{ \
	int32 Controller; \
}; \
struct MovePlayerController_eventMoveB3Pressed_Parms \
{ \
	int32 Controller; \
}; \
struct MovePlayerController_eventMoveB3Released_Parms \
{ \
	int32 Controller; \
}; \
struct MovePlayerController_eventMoveB4Pressed_Parms \
{ \
	int32 Controller; \
}; \
struct MovePlayerController_eventMoveB4Released_Parms \
{ \
	int32 Controller; \
}; \
struct MovePlayerController_eventMoveControllerDisabled_Parms \
{ \
	int32 Controller; \
}; \
struct MovePlayerController_eventMoveControllerEnabled_Parms \
{ \
	int32 Controller; \
}; \
struct MovePlayerController_eventMoveControllerMoved_Parms \
{ \
	int32 Controller; \
	FVector Position; \
	FVector Velocity; \
	FVector Acceleration; \
	FRotator Rotation; \
}; \
struct MovePlayerController_eventMoveDocked_Parms \
{ \
	int32 Controller; \
}; \
struct MovePlayerController_eventMoveStartPressed_Parms \
{ \
	int32 Controller; \
}; \
struct MovePlayerController_eventMoveStartReleased_Parms \
{ \
	int32 Controller; \
}; \
struct MovePlayerController_eventMoveTriggerChanged_Parms \
{ \
	int32 Controller; \
	float Value; \
}; \
struct MovePlayerController_eventMoveTriggerPressed_Parms \
{ \
	int32 Controller; \
}; \
struct MovePlayerController_eventMoveTriggerReleased_Parms \
{ \
	int32 Controller; \
}; \
struct MovePlayerController_eventMoveUndocked_Parms \
{ \
	int32 Controller; \
};


#define AMovePlayerController_RPC_WRAPPERS \
	DECLARE_FUNCTION(execMoveIsAvailable) \
	{ \
		P_FINISH; \
		*(bool*)Result=this->MoveIsAvailable(); \
	} \
	DECLARE_FUNCTION(execMoveGetLatestData) \
	{ \
		P_GET_PROPERTY(UIntProperty,Controller); \
		P_GET_STRUCT_REF(FVector,Out_Position); \
		P_GET_STRUCT_REF(FVector,Out_Velocity); \
		P_GET_STRUCT_REF(FVector,Out_Acceleration); \
		P_GET_STRUCT_REF(FRotator,Out_Rotation); \
		P_GET_STRUCT_REF(FVector2D,Out_joystick); \
		P_GET_PROPERTY_REF(UIntProperty,Out_buttons); \
		P_GET_PROPERTY_REF(UFloatProperty,Out_trigger); \
		P_GET_UBOOL_REF(Out_docked); \
		P_FINISH; \
		*(bool*)Result=this->MoveGetLatestData(Controller,Out_Position,Out_Velocity,Out_Acceleration,Out_Rotation,Out_joystick,Out_buttons,Out_trigger,Out_docked); \
	} \
	DECLARE_FUNCTION(execMoveGetHistoricalData) \
	{ \
		P_GET_PROPERTY(UIntProperty,Controller); \
		P_GET_PROPERTY(UIntProperty,historyIndex); \
		P_GET_STRUCT_REF(FVector,Out_Position); \
		P_GET_STRUCT_REF(FVector,Out_Velocity); \
		P_GET_STRUCT_REF(FVector,Out_Acceleration); \
		P_GET_STRUCT_REF(FRotator,Out_Rotation); \
		P_GET_STRUCT_REF(FVector2D,Out_joystick); \
		P_GET_PROPERTY_REF(UIntProperty,Out_buttons); \
		P_GET_PROPERTY_REF(UFloatProperty,Out_trigger); \
		P_GET_UBOOL_REF(Out_docked); \
		P_FINISH; \
		*(bool*)Result=this->MoveGetHistoricalData(Controller,historyIndex,Out_Position,Out_Velocity,Out_Acceleration,Out_Rotation,Out_joystick,Out_buttons,Out_trigger,Out_docked); \
	}


#define AMovePlayerController_CALLBACK_WRAPPERS
#define AMovePlayerController_INCLASS \
	private: \
	static void StaticRegisterNativesAMovePlayerController(); \
	friend MOVEPLUGIN_API class UClass* Z_Construct_UClass_AMovePlayerController(); \
	public: \
	DECLARE_CLASS(AMovePlayerController, APlayerController, COMPILED_IN_FLAGS(0 | CLASS_Config), 0, MovePlugin, NO_API) \
	/** Standard constructor, called after all reflected properties have been initialized */    NO_API AMovePlayerController(const class FPostConstructInitializeProperties& PCIP); \
	DECLARE_SERIALIZER(AMovePlayerController) \
	/** Indicates whether the class is compiled into the engine */    enum {IsIntrinsic=COMPILED_IN_INTRINSIC};


#undef UCLASS_CURRENT_FILE_NAME
#define UCLASS_CURRENT_FILE_NAME AMovePlayerController


#undef UCLASS
#undef UINTERFACE
#define UCLASS(...) \
AMovePlayerController_EVENTPARMS


#undef GENERATED_UCLASS_BODY
#undef GENERATED_IINTERFACE_BODY
#define GENERATED_UCLASS_BODY() \
public: \
	AMovePlayerController_RPC_WRAPPERS \
	AMovePlayerController_CALLBACK_WRAPPERS \
	AMovePlayerController_INCLASS \
public:


