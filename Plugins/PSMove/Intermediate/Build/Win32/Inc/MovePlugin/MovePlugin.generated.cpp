// Copyright 1998-2014 Epic Games, Inc. All Rights Reserved.
/*===========================================================================
	Boilerplate C++ definitions for a single module.
	This is automatically generated by UnrealHeaderTool.
	DO NOT modify this manually! Edit the corresponding .h files instead!
===========================================================================*/

#include "C:/Users/Ross/Documents/GitHub/UnrealEngine/Engine/Plugins/PSMove/Source/MovePlugin/Private/MovePluginPrivatePCH.h"
#include "MovePlugin.generated.dep.h"
	void AMovePlayerController::StaticRegisterNativesAMovePlayerController()
	{
		FNativeFunctionRegistrar::RegisterFunction(AMovePlayerController::StaticClass(),"MoveGetHistoricalData",(Native)&AMovePlayerController::execMoveGetHistoricalData);
		FNativeFunctionRegistrar::RegisterFunction(AMovePlayerController::StaticClass(),"MoveGetLatestData",(Native)&AMovePlayerController::execMoveGetLatestData);
		FNativeFunctionRegistrar::RegisterFunction(AMovePlayerController::StaticClass(),"MoveIsAvailable",(Native)&AMovePlayerController::execMoveIsAvailable);
	}
	IMPLEMENT_CLASS(AMovePlayerController);
	void AMovePlayerController::MoveAnyButtonPressed(int32 Controller)
	{
		MovePlayerController_eventMoveAnyButtonPressed_Parms Parms;
		Parms.Controller=Controller;
		ProcessEvent(FindFunctionChecked(MOVEPLUGIN_MoveAnyButtonPressed),&Parms);
	}
	void AMovePlayerController::MoveB1Pressed(int32 Controller)
	{
		MovePlayerController_eventMoveB1Pressed_Parms Parms;
		Parms.Controller=Controller;
		ProcessEvent(FindFunctionChecked(MOVEPLUGIN_MoveB1Pressed),&Parms);
	}
	void AMovePlayerController::MoveB1Released(int32 Controller)
	{
		MovePlayerController_eventMoveB1Released_Parms Parms;
		Parms.Controller=Controller;
		ProcessEvent(FindFunctionChecked(MOVEPLUGIN_MoveB1Released),&Parms);
	}
	void AMovePlayerController::MoveB2Pressed(int32 Controller)
	{
		MovePlayerController_eventMoveB2Pressed_Parms Parms;
		Parms.Controller=Controller;
		ProcessEvent(FindFunctionChecked(MOVEPLUGIN_MoveB2Pressed),&Parms);
	}
	void AMovePlayerController::MoveB2Released(int32 Controller)
	{
		MovePlayerController_eventMoveB2Released_Parms Parms;
		Parms.Controller=Controller;
		ProcessEvent(FindFunctionChecked(MOVEPLUGIN_MoveB2Released),&Parms);
	}
	void AMovePlayerController::MoveB3Pressed(int32 Controller)
	{
		MovePlayerController_eventMoveB3Pressed_Parms Parms;
		Parms.Controller=Controller;
		ProcessEvent(FindFunctionChecked(MOVEPLUGIN_MoveB3Pressed),&Parms);
	}
	void AMovePlayerController::MoveB3Released(int32 Controller)
	{
		MovePlayerController_eventMoveB3Released_Parms Parms;
		Parms.Controller=Controller;
		ProcessEvent(FindFunctionChecked(MOVEPLUGIN_MoveB3Released),&Parms);
	}
	void AMovePlayerController::MoveB4Pressed(int32 Controller)
	{
		MovePlayerController_eventMoveB4Pressed_Parms Parms;
		Parms.Controller=Controller;
		ProcessEvent(FindFunctionChecked(MOVEPLUGIN_MoveB4Pressed),&Parms);
	}
	void AMovePlayerController::MoveB4Released(int32 Controller)
	{
		MovePlayerController_eventMoveB4Released_Parms Parms;
		Parms.Controller=Controller;
		ProcessEvent(FindFunctionChecked(MOVEPLUGIN_MoveB4Released),&Parms);
	}
	void AMovePlayerController::MoveControllerDisabled(int32 Controller)
	{
		MovePlayerController_eventMoveControllerDisabled_Parms Parms;
		Parms.Controller=Controller;
		ProcessEvent(FindFunctionChecked(MOVEPLUGIN_MoveControllerDisabled),&Parms);
	}
	void AMovePlayerController::MoveControllerEnabled(int32 Controller)
	{
		MovePlayerController_eventMoveControllerEnabled_Parms Parms;
		Parms.Controller=Controller;
		ProcessEvent(FindFunctionChecked(MOVEPLUGIN_MoveControllerEnabled),&Parms);
	}
	void AMovePlayerController::MoveControllerMoved(int32 Controller, FVector Position, FVector Velocity, FVector Acceleration, FRotator Rotation)
	{
		MovePlayerController_eventMoveControllerMoved_Parms Parms;
		Parms.Controller=Controller;
		Parms.Position=Position;
		Parms.Velocity=Velocity;
		Parms.Acceleration=Acceleration;
		Parms.Rotation=Rotation;
		ProcessEvent(FindFunctionChecked(MOVEPLUGIN_MoveControllerMoved),&Parms);
	}
	void AMovePlayerController::MoveDocked(int32 Controller)
	{
		MovePlayerController_eventMoveDocked_Parms Parms;
		Parms.Controller=Controller;
		ProcessEvent(FindFunctionChecked(MOVEPLUGIN_MoveDocked),&Parms);
	}
	void AMovePlayerController::MovePluggedIn()
	{
		ProcessEvent(FindFunctionChecked(MOVEPLUGIN_MovePluggedIn),NULL);
	}
	void AMovePlayerController::MoveStartPressed(int32 Controller)
	{
		MovePlayerController_eventMoveStartPressed_Parms Parms;
		Parms.Controller=Controller;
		ProcessEvent(FindFunctionChecked(MOVEPLUGIN_MoveStartPressed),&Parms);
	}
	void AMovePlayerController::MoveStartReleased(int32 Controller)
	{
		MovePlayerController_eventMoveStartReleased_Parms Parms;
		Parms.Controller=Controller;
		ProcessEvent(FindFunctionChecked(MOVEPLUGIN_MoveStartReleased),&Parms);
	}
	void AMovePlayerController::MoveTriggerChanged(int32 Controller, float Value)
	{
		MovePlayerController_eventMoveTriggerChanged_Parms Parms;
		Parms.Controller=Controller;
		Parms.Value=Value;
		ProcessEvent(FindFunctionChecked(MOVEPLUGIN_MoveTriggerChanged),&Parms);
	}
	void AMovePlayerController::MoveTriggerPressed(int32 Controller)
	{
		MovePlayerController_eventMoveTriggerPressed_Parms Parms;
		Parms.Controller=Controller;
		ProcessEvent(FindFunctionChecked(MOVEPLUGIN_MoveTriggerPressed),&Parms);
	}
	void AMovePlayerController::MoveTriggerReleased(int32 Controller)
	{
		MovePlayerController_eventMoveTriggerReleased_Parms Parms;
		Parms.Controller=Controller;
		ProcessEvent(FindFunctionChecked(MOVEPLUGIN_MoveTriggerReleased),&Parms);
	}
	void AMovePlayerController::MoveUndocked(int32 Controller)
	{
		MovePlayerController_eventMoveUndocked_Parms Parms;
		Parms.Controller=Controller;
		ProcessEvent(FindFunctionChecked(MOVEPLUGIN_MoveUndocked),&Parms);
	}
	void AMovePlayerController::MoveUnplugged()
	{
		ProcessEvent(FindFunctionChecked(MOVEPLUGIN_MoveUnplugged),NULL);
	}
	void AMovePluginActor::StaticRegisterNativesAMovePluginActor()
	{
		FNativeFunctionRegistrar::RegisterFunction(AMovePluginActor::StaticClass(),"MoveGetHistoricalData",(Native)&AMovePluginActor::execMoveGetHistoricalData);
		FNativeFunctionRegistrar::RegisterFunction(AMovePluginActor::StaticClass(),"MoveGetLatestData",(Native)&AMovePluginActor::execMoveGetLatestData);
		FNativeFunctionRegistrar::RegisterFunction(AMovePluginActor::StaticClass(),"MoveIsAvailable",(Native)&AMovePluginActor::execMoveIsAvailable);
	}
	IMPLEMENT_CLASS(AMovePluginActor);
	void AMovePluginActor::MoveAnyButtonPressed(int32 Controller)
	{
		MovePluginActor_eventMoveAnyButtonPressed_Parms Parms;
		Parms.Controller=Controller;
		ProcessEvent(FindFunctionChecked(MOVEPLUGIN_MoveAnyButtonPressed),&Parms);
	}
	void AMovePluginActor::MoveB1Pressed(int32 Controller)
	{
		MovePluginActor_eventMoveB1Pressed_Parms Parms;
		Parms.Controller=Controller;
		ProcessEvent(FindFunctionChecked(MOVEPLUGIN_MoveB1Pressed),&Parms);
	}
	void AMovePluginActor::MoveB1Released(int32 Controller)
	{
		MovePluginActor_eventMoveB1Released_Parms Parms;
		Parms.Controller=Controller;
		ProcessEvent(FindFunctionChecked(MOVEPLUGIN_MoveB1Released),&Parms);
	}
	void AMovePluginActor::MoveB2Pressed(int32 Controller)
	{
		MovePluginActor_eventMoveB2Pressed_Parms Parms;
		Parms.Controller=Controller;
		ProcessEvent(FindFunctionChecked(MOVEPLUGIN_MoveB2Pressed),&Parms);
	}
	void AMovePluginActor::MoveB2Released(int32 Controller)
	{
		MovePluginActor_eventMoveB2Released_Parms Parms;
		Parms.Controller=Controller;
		ProcessEvent(FindFunctionChecked(MOVEPLUGIN_MoveB2Released),&Parms);
	}
	void AMovePluginActor::MoveB3Pressed(int32 Controller)
	{
		MovePluginActor_eventMoveB3Pressed_Parms Parms;
		Parms.Controller=Controller;
		ProcessEvent(FindFunctionChecked(MOVEPLUGIN_MoveB3Pressed),&Parms);
	}
	void AMovePluginActor::MoveB3Released(int32 Controller)
	{
		MovePluginActor_eventMoveB3Released_Parms Parms;
		Parms.Controller=Controller;
		ProcessEvent(FindFunctionChecked(MOVEPLUGIN_MoveB3Released),&Parms);
	}
	void AMovePluginActor::MoveB4Pressed(int32 Controller)
	{
		MovePluginActor_eventMoveB4Pressed_Parms Parms;
		Parms.Controller=Controller;
		ProcessEvent(FindFunctionChecked(MOVEPLUGIN_MoveB4Pressed),&Parms);
	}
	void AMovePluginActor::MoveB4Released(int32 Controller)
	{
		MovePluginActor_eventMoveB4Released_Parms Parms;
		Parms.Controller=Controller;
		ProcessEvent(FindFunctionChecked(MOVEPLUGIN_MoveB4Released),&Parms);
	}
	void AMovePluginActor::MoveControllerDisabled(int32 Controller)
	{
		MovePluginActor_eventMoveControllerDisabled_Parms Parms;
		Parms.Controller=Controller;
		ProcessEvent(FindFunctionChecked(MOVEPLUGIN_MoveControllerDisabled),&Parms);
	}
	void AMovePluginActor::MoveControllerEnabled(int32 Controller)
	{
		MovePluginActor_eventMoveControllerEnabled_Parms Parms;
		Parms.Controller=Controller;
		ProcessEvent(FindFunctionChecked(MOVEPLUGIN_MoveControllerEnabled),&Parms);
	}
	void AMovePluginActor::MoveControllerMoved(int32 Controller, FVector Position, FVector Velocity, FVector Acceleration, FRotator Rotation)
	{
		MovePluginActor_eventMoveControllerMoved_Parms Parms;
		Parms.Controller=Controller;
		Parms.Position=Position;
		Parms.Velocity=Velocity;
		Parms.Acceleration=Acceleration;
		Parms.Rotation=Rotation;
		ProcessEvent(FindFunctionChecked(MOVEPLUGIN_MoveControllerMoved),&Parms);
	}
	void AMovePluginActor::MoveDocked(int32 Controller)
	{
		MovePluginActor_eventMoveDocked_Parms Parms;
		Parms.Controller=Controller;
		ProcessEvent(FindFunctionChecked(MOVEPLUGIN_MoveDocked),&Parms);
	}
	void AMovePluginActor::MovePluggedIn()
	{
		ProcessEvent(FindFunctionChecked(MOVEPLUGIN_MovePluggedIn),NULL);
	}
	void AMovePluginActor::MoveStartPressed(int32 Controller)
	{
		MovePluginActor_eventMoveStartPressed_Parms Parms;
		Parms.Controller=Controller;
		ProcessEvent(FindFunctionChecked(MOVEPLUGIN_MoveStartPressed),&Parms);
	}
	void AMovePluginActor::MoveStartReleased(int32 Controller)
	{
		MovePluginActor_eventMoveStartReleased_Parms Parms;
		Parms.Controller=Controller;
		ProcessEvent(FindFunctionChecked(MOVEPLUGIN_MoveStartReleased),&Parms);
	}
	void AMovePluginActor::MoveTriggerChanged(int32 Controller, float Value)
	{
		MovePluginActor_eventMoveTriggerChanged_Parms Parms;
		Parms.Controller=Controller;
		Parms.Value=Value;
		ProcessEvent(FindFunctionChecked(MOVEPLUGIN_MoveTriggerChanged),&Parms);
	}
	void AMovePluginActor::MoveTriggerPressed(int32 Controller)
	{
		MovePluginActor_eventMoveTriggerPressed_Parms Parms;
		Parms.Controller=Controller;
		ProcessEvent(FindFunctionChecked(MOVEPLUGIN_MoveTriggerPressed),&Parms);
	}
	void AMovePluginActor::MoveTriggerReleased(int32 Controller)
	{
		MovePluginActor_eventMoveTriggerReleased_Parms Parms;
		Parms.Controller=Controller;
		ProcessEvent(FindFunctionChecked(MOVEPLUGIN_MoveTriggerReleased),&Parms);
	}
	void AMovePluginActor::MoveUndocked(int32 Controller)
	{
		MovePluginActor_eventMoveUndocked_Parms Parms;
		Parms.Controller=Controller;
		ProcessEvent(FindFunctionChecked(MOVEPLUGIN_MoveUndocked),&Parms);
	}
	void AMovePluginActor::MoveUnplugged()
	{
		ProcessEvent(FindFunctionChecked(MOVEPLUGIN_MoveUnplugged),NULL);
	}
FName MOVEPLUGIN_MoveAnyButtonPressed = FName(TEXT("MoveAnyButtonPressed"));
FName MOVEPLUGIN_MoveB1Pressed = FName(TEXT("MoveB1Pressed"));
FName MOVEPLUGIN_MoveB1Released = FName(TEXT("MoveB1Released"));
FName MOVEPLUGIN_MoveB2Pressed = FName(TEXT("MoveB2Pressed"));
FName MOVEPLUGIN_MoveB2Released = FName(TEXT("MoveB2Released"));
FName MOVEPLUGIN_MoveB3Pressed = FName(TEXT("MoveB3Pressed"));
FName MOVEPLUGIN_MoveB3Released = FName(TEXT("MoveB3Released"));
FName MOVEPLUGIN_MoveB4Pressed = FName(TEXT("MoveB4Pressed"));
FName MOVEPLUGIN_MoveB4Released = FName(TEXT("MoveB4Released"));
FName MOVEPLUGIN_MoveControllerDisabled = FName(TEXT("MoveControllerDisabled"));
FName MOVEPLUGIN_MoveControllerEnabled = FName(TEXT("MoveControllerEnabled"));
FName MOVEPLUGIN_MoveControllerMoved = FName(TEXT("MoveControllerMoved"));
FName MOVEPLUGIN_MoveDocked = FName(TEXT("MoveDocked"));
FName MOVEPLUGIN_MovePluggedIn = FName(TEXT("MovePluggedIn"));
FName MOVEPLUGIN_MoveStartPressed = FName(TEXT("MoveStartPressed"));
FName MOVEPLUGIN_MoveStartReleased = FName(TEXT("MoveStartReleased"));
FName MOVEPLUGIN_MoveTriggerChanged = FName(TEXT("MoveTriggerChanged"));
FName MOVEPLUGIN_MoveTriggerPressed = FName(TEXT("MoveTriggerPressed"));
FName MOVEPLUGIN_MoveTriggerReleased = FName(TEXT("MoveTriggerReleased"));
FName MOVEPLUGIN_MoveUndocked = FName(TEXT("MoveUndocked"));
FName MOVEPLUGIN_MoveUnplugged = FName(TEXT("MoveUnplugged"));
#if USE_COMPILED_IN_NATIVES
// Cross Module References
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_UObject_FRotator();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_UObject_FVector();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_UObject_FVector2D();
	ENGINE_API class UClass* Z_Construct_UClass_APlayerController();
	ENGINE_API class UClass* Z_Construct_UClass_AActor();

	MOVEPLUGIN_API class UFunction* Z_Construct_UFunction_AMovePlayerController_MoveAnyButtonPressed();
	MOVEPLUGIN_API class UFunction* Z_Construct_UFunction_AMovePlayerController_MoveB1Pressed();
	MOVEPLUGIN_API class UFunction* Z_Construct_UFunction_AMovePlayerController_MoveB1Released();
	MOVEPLUGIN_API class UFunction* Z_Construct_UFunction_AMovePlayerController_MoveB2Pressed();
	MOVEPLUGIN_API class UFunction* Z_Construct_UFunction_AMovePlayerController_MoveB2Released();
	MOVEPLUGIN_API class UFunction* Z_Construct_UFunction_AMovePlayerController_MoveB3Pressed();
	MOVEPLUGIN_API class UFunction* Z_Construct_UFunction_AMovePlayerController_MoveB3Released();
	MOVEPLUGIN_API class UFunction* Z_Construct_UFunction_AMovePlayerController_MoveB4Pressed();
	MOVEPLUGIN_API class UFunction* Z_Construct_UFunction_AMovePlayerController_MoveB4Released();
	MOVEPLUGIN_API class UFunction* Z_Construct_UFunction_AMovePlayerController_MoveControllerDisabled();
	MOVEPLUGIN_API class UFunction* Z_Construct_UFunction_AMovePlayerController_MoveControllerEnabled();
	MOVEPLUGIN_API class UFunction* Z_Construct_UFunction_AMovePlayerController_MoveControllerMoved();
	MOVEPLUGIN_API class UFunction* Z_Construct_UFunction_AMovePlayerController_MoveDocked();
	MOVEPLUGIN_API class UFunction* Z_Construct_UFunction_AMovePlayerController_MoveGetHistoricalData();
	MOVEPLUGIN_API class UFunction* Z_Construct_UFunction_AMovePlayerController_MoveGetLatestData();
	MOVEPLUGIN_API class UFunction* Z_Construct_UFunction_AMovePlayerController_MoveIsAvailable();
	MOVEPLUGIN_API class UFunction* Z_Construct_UFunction_AMovePlayerController_MovePluggedIn();
	MOVEPLUGIN_API class UFunction* Z_Construct_UFunction_AMovePlayerController_MoveStartPressed();
	MOVEPLUGIN_API class UFunction* Z_Construct_UFunction_AMovePlayerController_MoveStartReleased();
	MOVEPLUGIN_API class UFunction* Z_Construct_UFunction_AMovePlayerController_MoveTriggerChanged();
	MOVEPLUGIN_API class UFunction* Z_Construct_UFunction_AMovePlayerController_MoveTriggerPressed();
	MOVEPLUGIN_API class UFunction* Z_Construct_UFunction_AMovePlayerController_MoveTriggerReleased();
	MOVEPLUGIN_API class UFunction* Z_Construct_UFunction_AMovePlayerController_MoveUndocked();
	MOVEPLUGIN_API class UFunction* Z_Construct_UFunction_AMovePlayerController_MoveUnplugged();
	MOVEPLUGIN_API class UClass* Z_Construct_UClass_AMovePlayerController_NoRegister();
	MOVEPLUGIN_API class UClass* Z_Construct_UClass_AMovePlayerController();
	MOVEPLUGIN_API class UFunction* Z_Construct_UFunction_AMovePluginActor_MoveAnyButtonPressed();
	MOVEPLUGIN_API class UFunction* Z_Construct_UFunction_AMovePluginActor_MoveB1Pressed();
	MOVEPLUGIN_API class UFunction* Z_Construct_UFunction_AMovePluginActor_MoveB1Released();
	MOVEPLUGIN_API class UFunction* Z_Construct_UFunction_AMovePluginActor_MoveB2Pressed();
	MOVEPLUGIN_API class UFunction* Z_Construct_UFunction_AMovePluginActor_MoveB2Released();
	MOVEPLUGIN_API class UFunction* Z_Construct_UFunction_AMovePluginActor_MoveB3Pressed();
	MOVEPLUGIN_API class UFunction* Z_Construct_UFunction_AMovePluginActor_MoveB3Released();
	MOVEPLUGIN_API class UFunction* Z_Construct_UFunction_AMovePluginActor_MoveB4Pressed();
	MOVEPLUGIN_API class UFunction* Z_Construct_UFunction_AMovePluginActor_MoveB4Released();
	MOVEPLUGIN_API class UFunction* Z_Construct_UFunction_AMovePluginActor_MoveControllerDisabled();
	MOVEPLUGIN_API class UFunction* Z_Construct_UFunction_AMovePluginActor_MoveControllerEnabled();
	MOVEPLUGIN_API class UFunction* Z_Construct_UFunction_AMovePluginActor_MoveControllerMoved();
	MOVEPLUGIN_API class UFunction* Z_Construct_UFunction_AMovePluginActor_MoveDocked();
	MOVEPLUGIN_API class UFunction* Z_Construct_UFunction_AMovePluginActor_MoveGetHistoricalData();
	MOVEPLUGIN_API class UFunction* Z_Construct_UFunction_AMovePluginActor_MoveGetLatestData();
	MOVEPLUGIN_API class UFunction* Z_Construct_UFunction_AMovePluginActor_MoveIsAvailable();
	MOVEPLUGIN_API class UFunction* Z_Construct_UFunction_AMovePluginActor_MovePluggedIn();
	MOVEPLUGIN_API class UFunction* Z_Construct_UFunction_AMovePluginActor_MoveStartPressed();
	MOVEPLUGIN_API class UFunction* Z_Construct_UFunction_AMovePluginActor_MoveStartReleased();
	MOVEPLUGIN_API class UFunction* Z_Construct_UFunction_AMovePluginActor_MoveTriggerChanged();
	MOVEPLUGIN_API class UFunction* Z_Construct_UFunction_AMovePluginActor_MoveTriggerPressed();
	MOVEPLUGIN_API class UFunction* Z_Construct_UFunction_AMovePluginActor_MoveTriggerReleased();
	MOVEPLUGIN_API class UFunction* Z_Construct_UFunction_AMovePluginActor_MoveUndocked();
	MOVEPLUGIN_API class UFunction* Z_Construct_UFunction_AMovePluginActor_MoveUnplugged();
	MOVEPLUGIN_API class UClass* Z_Construct_UClass_AMovePluginActor_NoRegister();
	MOVEPLUGIN_API class UClass* Z_Construct_UClass_AMovePluginActor();
	MOVEPLUGIN_API class UPackage* Z_Construct_UPackage_MovePlugin();
	UFunction* Z_Construct_UFunction_AMovePlayerController_MoveAnyButtonPressed()
	{
		UClass* OuterClass=Z_Construct_UClass_AMovePlayerController();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(OuterClass, TEXT("MoveAnyButtonPressed"), RF_Public|RF_Transient|RF_Native) UFunction(FPostConstructInitializeProperties(), NULL, 0x08020800, 65535, sizeof(MovePlayerController_eventMoveAnyButtonPressed_Parms));
			UProperty* NewProp_Controller = new(ReturnFunction, TEXT("Controller"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(Controller, MovePlayerController_eventMoveAnyButtonPressed_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("MoveEvents"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/MovePlayerController.h"));
			MetaData->SetValue(NewProp_Controller, TEXT("ModuleRelativePath"), TEXT("Classes/MovePlayerController.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_AMovePlayerController_MoveB1Pressed()
	{
		UClass* OuterClass=Z_Construct_UClass_AMovePlayerController();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(OuterClass, TEXT("MoveB1Pressed"), RF_Public|RF_Transient|RF_Native) UFunction(FPostConstructInitializeProperties(), NULL, 0x08020800, 65535, sizeof(MovePlayerController_eventMoveB1Pressed_Parms));
			UProperty* NewProp_Controller = new(ReturnFunction, TEXT("Controller"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(Controller, MovePlayerController_eventMoveB1Pressed_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("MoveEvents"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/MovePlayerController.h"));
			MetaData->SetValue(NewProp_Controller, TEXT("ModuleRelativePath"), TEXT("Classes/MovePlayerController.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_AMovePlayerController_MoveB1Released()
	{
		UClass* OuterClass=Z_Construct_UClass_AMovePlayerController();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(OuterClass, TEXT("MoveB1Released"), RF_Public|RF_Transient|RF_Native) UFunction(FPostConstructInitializeProperties(), NULL, 0x08020800, 65535, sizeof(MovePlayerController_eventMoveB1Released_Parms));
			UProperty* NewProp_Controller = new(ReturnFunction, TEXT("Controller"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(Controller, MovePlayerController_eventMoveB1Released_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("MoveEvents"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/MovePlayerController.h"));
			MetaData->SetValue(NewProp_Controller, TEXT("ModuleRelativePath"), TEXT("Classes/MovePlayerController.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_AMovePlayerController_MoveB2Pressed()
	{
		UClass* OuterClass=Z_Construct_UClass_AMovePlayerController();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(OuterClass, TEXT("MoveB2Pressed"), RF_Public|RF_Transient|RF_Native) UFunction(FPostConstructInitializeProperties(), NULL, 0x08020800, 65535, sizeof(MovePlayerController_eventMoveB2Pressed_Parms));
			UProperty* NewProp_Controller = new(ReturnFunction, TEXT("Controller"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(Controller, MovePlayerController_eventMoveB2Pressed_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("MoveEvents"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/MovePlayerController.h"));
			MetaData->SetValue(NewProp_Controller, TEXT("ModuleRelativePath"), TEXT("Classes/MovePlayerController.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_AMovePlayerController_MoveB2Released()
	{
		UClass* OuterClass=Z_Construct_UClass_AMovePlayerController();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(OuterClass, TEXT("MoveB2Released"), RF_Public|RF_Transient|RF_Native) UFunction(FPostConstructInitializeProperties(), NULL, 0x08020800, 65535, sizeof(MovePlayerController_eventMoveB2Released_Parms));
			UProperty* NewProp_Controller = new(ReturnFunction, TEXT("Controller"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(Controller, MovePlayerController_eventMoveB2Released_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("MoveEvents"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/MovePlayerController.h"));
			MetaData->SetValue(NewProp_Controller, TEXT("ModuleRelativePath"), TEXT("Classes/MovePlayerController.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_AMovePlayerController_MoveB3Pressed()
	{
		UClass* OuterClass=Z_Construct_UClass_AMovePlayerController();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(OuterClass, TEXT("MoveB3Pressed"), RF_Public|RF_Transient|RF_Native) UFunction(FPostConstructInitializeProperties(), NULL, 0x08020800, 65535, sizeof(MovePlayerController_eventMoveB3Pressed_Parms));
			UProperty* NewProp_Controller = new(ReturnFunction, TEXT("Controller"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(Controller, MovePlayerController_eventMoveB3Pressed_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("MoveEvents"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/MovePlayerController.h"));
			MetaData->SetValue(NewProp_Controller, TEXT("ModuleRelativePath"), TEXT("Classes/MovePlayerController.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_AMovePlayerController_MoveB3Released()
	{
		UClass* OuterClass=Z_Construct_UClass_AMovePlayerController();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(OuterClass, TEXT("MoveB3Released"), RF_Public|RF_Transient|RF_Native) UFunction(FPostConstructInitializeProperties(), NULL, 0x08020800, 65535, sizeof(MovePlayerController_eventMoveB3Released_Parms));
			UProperty* NewProp_Controller = new(ReturnFunction, TEXT("Controller"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(Controller, MovePlayerController_eventMoveB3Released_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("MoveEvents"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/MovePlayerController.h"));
			MetaData->SetValue(NewProp_Controller, TEXT("ModuleRelativePath"), TEXT("Classes/MovePlayerController.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_AMovePlayerController_MoveB4Pressed()
	{
		UClass* OuterClass=Z_Construct_UClass_AMovePlayerController();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(OuterClass, TEXT("MoveB4Pressed"), RF_Public|RF_Transient|RF_Native) UFunction(FPostConstructInitializeProperties(), NULL, 0x08020800, 65535, sizeof(MovePlayerController_eventMoveB4Pressed_Parms));
			UProperty* NewProp_Controller = new(ReturnFunction, TEXT("Controller"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(Controller, MovePlayerController_eventMoveB4Pressed_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("MoveEvents"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/MovePlayerController.h"));
			MetaData->SetValue(NewProp_Controller, TEXT("ModuleRelativePath"), TEXT("Classes/MovePlayerController.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_AMovePlayerController_MoveB4Released()
	{
		UClass* OuterClass=Z_Construct_UClass_AMovePlayerController();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(OuterClass, TEXT("MoveB4Released"), RF_Public|RF_Transient|RF_Native) UFunction(FPostConstructInitializeProperties(), NULL, 0x08020800, 65535, sizeof(MovePlayerController_eventMoveB4Released_Parms));
			UProperty* NewProp_Controller = new(ReturnFunction, TEXT("Controller"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(Controller, MovePlayerController_eventMoveB4Released_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("MoveEvents"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/MovePlayerController.h"));
			MetaData->SetValue(NewProp_Controller, TEXT("ModuleRelativePath"), TEXT("Classes/MovePlayerController.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_AMovePlayerController_MoveControllerDisabled()
	{
		UClass* OuterClass=Z_Construct_UClass_AMovePlayerController();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(OuterClass, TEXT("MoveControllerDisabled"), RF_Public|RF_Transient|RF_Native) UFunction(FPostConstructInitializeProperties(), NULL, 0x08020800, 65535, sizeof(MovePlayerController_eventMoveControllerDisabled_Parms));
			UProperty* NewProp_Controller = new(ReturnFunction, TEXT("Controller"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(Controller, MovePlayerController_eventMoveControllerDisabled_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("MoveEvents"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/MovePlayerController.h"));
			MetaData->SetValue(NewProp_Controller, TEXT("ModuleRelativePath"), TEXT("Classes/MovePlayerController.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_AMovePlayerController_MoveControllerEnabled()
	{
		UClass* OuterClass=Z_Construct_UClass_AMovePlayerController();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(OuterClass, TEXT("MoveControllerEnabled"), RF_Public|RF_Transient|RF_Native) UFunction(FPostConstructInitializeProperties(), NULL, 0x08020800, 65535, sizeof(MovePlayerController_eventMoveControllerEnabled_Parms));
			UProperty* NewProp_Controller = new(ReturnFunction, TEXT("Controller"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(Controller, MovePlayerController_eventMoveControllerEnabled_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("MoveEvents"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/MovePlayerController.h"));
			MetaData->SetValue(NewProp_Controller, TEXT("ModuleRelativePath"), TEXT("Classes/MovePlayerController.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_AMovePlayerController_MoveControllerMoved()
	{
		UClass* OuterClass=Z_Construct_UClass_AMovePlayerController();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(OuterClass, TEXT("MoveControllerMoved"), RF_Public|RF_Transient|RF_Native) UFunction(FPostConstructInitializeProperties(), NULL, 0x08820800, 65535, sizeof(MovePlayerController_eventMoveControllerMoved_Parms));
			UProperty* NewProp_Rotation = new(ReturnFunction, TEXT("Rotation"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Rotation, MovePlayerController_eventMoveControllerMoved_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_UObject_FRotator());
			UProperty* NewProp_Acceleration = new(ReturnFunction, TEXT("Acceleration"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Acceleration, MovePlayerController_eventMoveControllerMoved_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_UObject_FVector());
			UProperty* NewProp_Velocity = new(ReturnFunction, TEXT("Velocity"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Velocity, MovePlayerController_eventMoveControllerMoved_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_UObject_FVector());
			UProperty* NewProp_Position = new(ReturnFunction, TEXT("Position"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Position, MovePlayerController_eventMoveControllerMoved_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_UObject_FVector());
			UProperty* NewProp_Controller = new(ReturnFunction, TEXT("Controller"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(Controller, MovePlayerController_eventMoveControllerMoved_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("MoveEvents"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/MovePlayerController.h"));
			MetaData->SetValue(NewProp_Rotation, TEXT("ModuleRelativePath"), TEXT("Classes/MovePlayerController.h"));
			MetaData->SetValue(NewProp_Acceleration, TEXT("ModuleRelativePath"), TEXT("Classes/MovePlayerController.h"));
			MetaData->SetValue(NewProp_Velocity, TEXT("ModuleRelativePath"), TEXT("Classes/MovePlayerController.h"));
			MetaData->SetValue(NewProp_Position, TEXT("ModuleRelativePath"), TEXT("Classes/MovePlayerController.h"));
			MetaData->SetValue(NewProp_Controller, TEXT("ModuleRelativePath"), TEXT("Classes/MovePlayerController.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_AMovePlayerController_MoveDocked()
	{
		UClass* OuterClass=Z_Construct_UClass_AMovePlayerController();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(OuterClass, TEXT("MoveDocked"), RF_Public|RF_Transient|RF_Native) UFunction(FPostConstructInitializeProperties(), NULL, 0x08020800, 65535, sizeof(MovePlayerController_eventMoveDocked_Parms));
			UProperty* NewProp_Controller = new(ReturnFunction, TEXT("Controller"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(Controller, MovePlayerController_eventMoveDocked_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("MoveEvents"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/MovePlayerController.h"));
			MetaData->SetValue(NewProp_Controller, TEXT("ModuleRelativePath"), TEXT("Classes/MovePlayerController.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_AMovePlayerController_MoveGetHistoricalData()
	{
		struct MovePlayerController_eventMoveGetHistoricalData_Parms
		{
			int32 Controller;
			int32 historyIndex;
			FVector Position;
			FVector Velocity;
			FVector Acceleration;
			FRotator Rotation;
			FVector2D joystick;
			int32 buttons;
			float trigger;
			bool docked;
			bool ReturnValue;
		};
		UClass* OuterClass=Z_Construct_UClass_AMovePlayerController();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(OuterClass, TEXT("MoveGetHistoricalData"), RF_Public|RF_Transient|RF_Native) UFunction(FPostConstructInitializeProperties(), NULL, 0x04C20401, 65535, sizeof(MovePlayerController_eventMoveGetHistoricalData_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, MovePlayerController_eventMoveGetHistoricalData_Parms, bool);
			UProperty* NewProp_ReturnValue = new(ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FPostConstructInitializeProperties(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, MovePlayerController_eventMoveGetHistoricalData_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, MovePlayerController_eventMoveGetHistoricalData_Parms), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(docked, MovePlayerController_eventMoveGetHistoricalData_Parms, bool);
			UProperty* NewProp_docked = new(ReturnFunction, TEXT("docked"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FPostConstructInitializeProperties(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(docked, MovePlayerController_eventMoveGetHistoricalData_Parms), 0x0000000000000180, CPP_BOOL_PROPERTY_BITMASK(docked, MovePlayerController_eventMoveGetHistoricalData_Parms), sizeof(bool), true);
			UProperty* NewProp_trigger = new(ReturnFunction, TEXT("trigger"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(trigger, MovePlayerController_eventMoveGetHistoricalData_Parms), 0x0000000000000180);
			UProperty* NewProp_buttons = new(ReturnFunction, TEXT("buttons"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(buttons, MovePlayerController_eventMoveGetHistoricalData_Parms), 0x0000000000000180);
			UProperty* NewProp_joystick = new(ReturnFunction, TEXT("joystick"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(joystick, MovePlayerController_eventMoveGetHistoricalData_Parms), 0x0000000000000180, Z_Construct_UScriptStruct_UObject_FVector2D());
			UProperty* NewProp_Rotation = new(ReturnFunction, TEXT("Rotation"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Rotation, MovePlayerController_eventMoveGetHistoricalData_Parms), 0x0000000000000180, Z_Construct_UScriptStruct_UObject_FRotator());
			UProperty* NewProp_Acceleration = new(ReturnFunction, TEXT("Acceleration"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Acceleration, MovePlayerController_eventMoveGetHistoricalData_Parms), 0x0000000000000180, Z_Construct_UScriptStruct_UObject_FVector());
			UProperty* NewProp_Velocity = new(ReturnFunction, TEXT("Velocity"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Velocity, MovePlayerController_eventMoveGetHistoricalData_Parms), 0x0000000000000180, Z_Construct_UScriptStruct_UObject_FVector());
			UProperty* NewProp_Position = new(ReturnFunction, TEXT("Position"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Position, MovePlayerController_eventMoveGetHistoricalData_Parms), 0x0000000000000180, Z_Construct_UScriptStruct_UObject_FVector());
			UProperty* NewProp_historyIndex = new(ReturnFunction, TEXT("historyIndex"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(historyIndex, MovePlayerController_eventMoveGetHistoricalData_Parms), 0x0000000000000080);
			UProperty* NewProp_Controller = new(ReturnFunction, TEXT("Controller"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(Controller, MovePlayerController_eventMoveGetHistoricalData_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("MoveFunctions"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/MovePlayerController.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Poll for historical data. Valid index is 0-9. Returns false if data is unavailable."));
			MetaData->SetValue(NewProp_ReturnValue, TEXT("ModuleRelativePath"), TEXT("Classes/MovePlayerController.h"));
			MetaData->SetValue(NewProp_docked, TEXT("ModuleRelativePath"), TEXT("Classes/MovePlayerController.h"));
			MetaData->SetValue(NewProp_trigger, TEXT("ModuleRelativePath"), TEXT("Classes/MovePlayerController.h"));
			MetaData->SetValue(NewProp_buttons, TEXT("ModuleRelativePath"), TEXT("Classes/MovePlayerController.h"));
			MetaData->SetValue(NewProp_joystick, TEXT("ModuleRelativePath"), TEXT("Classes/MovePlayerController.h"));
			MetaData->SetValue(NewProp_Rotation, TEXT("ModuleRelativePath"), TEXT("Classes/MovePlayerController.h"));
			MetaData->SetValue(NewProp_Acceleration, TEXT("ModuleRelativePath"), TEXT("Classes/MovePlayerController.h"));
			MetaData->SetValue(NewProp_Velocity, TEXT("ModuleRelativePath"), TEXT("Classes/MovePlayerController.h"));
			MetaData->SetValue(NewProp_Position, TEXT("ModuleRelativePath"), TEXT("Classes/MovePlayerController.h"));
			MetaData->SetValue(NewProp_historyIndex, TEXT("ModuleRelativePath"), TEXT("Classes/MovePlayerController.h"));
			MetaData->SetValue(NewProp_Controller, TEXT("ModuleRelativePath"), TEXT("Classes/MovePlayerController.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_AMovePlayerController_MoveGetLatestData()
	{
		struct MovePlayerController_eventMoveGetLatestData_Parms
		{
			int32 Controller;
			FVector Position;
			FVector Velocity;
			FVector Acceleration;
			FRotator Rotation;
			FVector2D joystick;
			int32 buttons;
			float trigger;
			bool docked;
			bool ReturnValue;
		};
		UClass* OuterClass=Z_Construct_UClass_AMovePlayerController();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(OuterClass, TEXT("MoveGetLatestData"), RF_Public|RF_Transient|RF_Native) UFunction(FPostConstructInitializeProperties(), NULL, 0x04C20401, 65535, sizeof(MovePlayerController_eventMoveGetLatestData_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, MovePlayerController_eventMoveGetLatestData_Parms, bool);
			UProperty* NewProp_ReturnValue = new(ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FPostConstructInitializeProperties(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, MovePlayerController_eventMoveGetLatestData_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, MovePlayerController_eventMoveGetLatestData_Parms), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(docked, MovePlayerController_eventMoveGetLatestData_Parms, bool);
			UProperty* NewProp_docked = new(ReturnFunction, TEXT("docked"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FPostConstructInitializeProperties(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(docked, MovePlayerController_eventMoveGetLatestData_Parms), 0x0000000000000180, CPP_BOOL_PROPERTY_BITMASK(docked, MovePlayerController_eventMoveGetLatestData_Parms), sizeof(bool), true);
			UProperty* NewProp_trigger = new(ReturnFunction, TEXT("trigger"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(trigger, MovePlayerController_eventMoveGetLatestData_Parms), 0x0000000000000180);
			UProperty* NewProp_buttons = new(ReturnFunction, TEXT("buttons"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(buttons, MovePlayerController_eventMoveGetLatestData_Parms), 0x0000000000000180);
			UProperty* NewProp_joystick = new(ReturnFunction, TEXT("joystick"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(joystick, MovePlayerController_eventMoveGetLatestData_Parms), 0x0000000000000180, Z_Construct_UScriptStruct_UObject_FVector2D());
			UProperty* NewProp_Rotation = new(ReturnFunction, TEXT("Rotation"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Rotation, MovePlayerController_eventMoveGetLatestData_Parms), 0x0000000000000180, Z_Construct_UScriptStruct_UObject_FRotator());
			UProperty* NewProp_Acceleration = new(ReturnFunction, TEXT("Acceleration"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Acceleration, MovePlayerController_eventMoveGetLatestData_Parms), 0x0000000000000180, Z_Construct_UScriptStruct_UObject_FVector());
			UProperty* NewProp_Velocity = new(ReturnFunction, TEXT("Velocity"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Velocity, MovePlayerController_eventMoveGetLatestData_Parms), 0x0000000000000180, Z_Construct_UScriptStruct_UObject_FVector());
			UProperty* NewProp_Position = new(ReturnFunction, TEXT("Position"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Position, MovePlayerController_eventMoveGetLatestData_Parms), 0x0000000000000180, Z_Construct_UScriptStruct_UObject_FVector());
			UProperty* NewProp_Controller = new(ReturnFunction, TEXT("Controller"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(Controller, MovePlayerController_eventMoveGetLatestData_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("MoveFunctions"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/MovePlayerController.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Poll for latest data. Returns false if data is unavailable."));
			MetaData->SetValue(NewProp_ReturnValue, TEXT("ModuleRelativePath"), TEXT("Classes/MovePlayerController.h"));
			MetaData->SetValue(NewProp_docked, TEXT("ModuleRelativePath"), TEXT("Classes/MovePlayerController.h"));
			MetaData->SetValue(NewProp_trigger, TEXT("ModuleRelativePath"), TEXT("Classes/MovePlayerController.h"));
			MetaData->SetValue(NewProp_buttons, TEXT("ModuleRelativePath"), TEXT("Classes/MovePlayerController.h"));
			MetaData->SetValue(NewProp_joystick, TEXT("ModuleRelativePath"), TEXT("Classes/MovePlayerController.h"));
			MetaData->SetValue(NewProp_Rotation, TEXT("ModuleRelativePath"), TEXT("Classes/MovePlayerController.h"));
			MetaData->SetValue(NewProp_Acceleration, TEXT("ModuleRelativePath"), TEXT("Classes/MovePlayerController.h"));
			MetaData->SetValue(NewProp_Velocity, TEXT("ModuleRelativePath"), TEXT("Classes/MovePlayerController.h"));
			MetaData->SetValue(NewProp_Position, TEXT("ModuleRelativePath"), TEXT("Classes/MovePlayerController.h"));
			MetaData->SetValue(NewProp_Controller, TEXT("ModuleRelativePath"), TEXT("Classes/MovePlayerController.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_AMovePlayerController_MoveIsAvailable()
	{
		struct MovePlayerController_eventMoveIsAvailable_Parms
		{
			bool ReturnValue;
		};
		UClass* OuterClass=Z_Construct_UClass_AMovePlayerController();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(OuterClass, TEXT("MoveIsAvailable"), RF_Public|RF_Transient|RF_Native) UFunction(FPostConstructInitializeProperties(), NULL, 0x04020401, 65535, sizeof(MovePlayerController_eventMoveIsAvailable_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, MovePlayerController_eventMoveIsAvailable_Parms, bool);
			UProperty* NewProp_ReturnValue = new(ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FPostConstructInitializeProperties(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, MovePlayerController_eventMoveIsAvailable_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, MovePlayerController_eventMoveIsAvailable_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("MoveFunctions"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/MovePlayerController.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Check if the Move is available/plugged in."));
			MetaData->SetValue(NewProp_ReturnValue, TEXT("ModuleRelativePath"), TEXT("Classes/MovePlayerController.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_AMovePlayerController_MovePluggedIn()
	{
		UClass* OuterClass=Z_Construct_UClass_AMovePlayerController();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(OuterClass, TEXT("MovePluggedIn"), RF_Public|RF_Transient|RF_Native) UFunction(FPostConstructInitializeProperties(), NULL, 0x08020800, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("MoveEvents"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/MovePlayerController.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Define blueprint events"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_AMovePlayerController_MoveStartPressed()
	{
		UClass* OuterClass=Z_Construct_UClass_AMovePlayerController();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(OuterClass, TEXT("MoveStartPressed"), RF_Public|RF_Transient|RF_Native) UFunction(FPostConstructInitializeProperties(), NULL, 0x08020800, 65535, sizeof(MovePlayerController_eventMoveStartPressed_Parms));
			UProperty* NewProp_Controller = new(ReturnFunction, TEXT("Controller"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(Controller, MovePlayerController_eventMoveStartPressed_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("MoveEvents"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/MovePlayerController.h"));
			MetaData->SetValue(NewProp_Controller, TEXT("ModuleRelativePath"), TEXT("Classes/MovePlayerController.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_AMovePlayerController_MoveStartReleased()
	{
		UClass* OuterClass=Z_Construct_UClass_AMovePlayerController();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(OuterClass, TEXT("MoveStartReleased"), RF_Public|RF_Transient|RF_Native) UFunction(FPostConstructInitializeProperties(), NULL, 0x08020800, 65535, sizeof(MovePlayerController_eventMoveStartReleased_Parms));
			UProperty* NewProp_Controller = new(ReturnFunction, TEXT("Controller"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(Controller, MovePlayerController_eventMoveStartReleased_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("MoveEvents"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/MovePlayerController.h"));
			MetaData->SetValue(NewProp_Controller, TEXT("ModuleRelativePath"), TEXT("Classes/MovePlayerController.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_AMovePlayerController_MoveTriggerChanged()
	{
		UClass* OuterClass=Z_Construct_UClass_AMovePlayerController();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(OuterClass, TEXT("MoveTriggerChanged"), RF_Public|RF_Transient|RF_Native) UFunction(FPostConstructInitializeProperties(), NULL, 0x08020800, 65535, sizeof(MovePlayerController_eventMoveTriggerChanged_Parms));
			UProperty* NewProp_Value = new(ReturnFunction, TEXT("Value"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Value, MovePlayerController_eventMoveTriggerChanged_Parms), 0x0000000000000080);
			UProperty* NewProp_Controller = new(ReturnFunction, TEXT("Controller"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(Controller, MovePlayerController_eventMoveTriggerChanged_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("MoveEvents"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/MovePlayerController.h"));
			MetaData->SetValue(NewProp_Value, TEXT("ModuleRelativePath"), TEXT("Classes/MovePlayerController.h"));
			MetaData->SetValue(NewProp_Controller, TEXT("ModuleRelativePath"), TEXT("Classes/MovePlayerController.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_AMovePlayerController_MoveTriggerPressed()
	{
		UClass* OuterClass=Z_Construct_UClass_AMovePlayerController();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(OuterClass, TEXT("MoveTriggerPressed"), RF_Public|RF_Transient|RF_Native) UFunction(FPostConstructInitializeProperties(), NULL, 0x08020800, 65535, sizeof(MovePlayerController_eventMoveTriggerPressed_Parms));
			UProperty* NewProp_Controller = new(ReturnFunction, TEXT("Controller"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(Controller, MovePlayerController_eventMoveTriggerPressed_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("MoveEvents"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/MovePlayerController.h"));
			MetaData->SetValue(NewProp_Controller, TEXT("ModuleRelativePath"), TEXT("Classes/MovePlayerController.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_AMovePlayerController_MoveTriggerReleased()
	{
		UClass* OuterClass=Z_Construct_UClass_AMovePlayerController();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(OuterClass, TEXT("MoveTriggerReleased"), RF_Public|RF_Transient|RF_Native) UFunction(FPostConstructInitializeProperties(), NULL, 0x08020800, 65535, sizeof(MovePlayerController_eventMoveTriggerReleased_Parms));
			UProperty* NewProp_Controller = new(ReturnFunction, TEXT("Controller"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(Controller, MovePlayerController_eventMoveTriggerReleased_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("MoveEvents"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/MovePlayerController.h"));
			MetaData->SetValue(NewProp_Controller, TEXT("ModuleRelativePath"), TEXT("Classes/MovePlayerController.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_AMovePlayerController_MoveUndocked()
	{
		UClass* OuterClass=Z_Construct_UClass_AMovePlayerController();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(OuterClass, TEXT("MoveUndocked"), RF_Public|RF_Transient|RF_Native) UFunction(FPostConstructInitializeProperties(), NULL, 0x08020800, 65535, sizeof(MovePlayerController_eventMoveUndocked_Parms));
			UProperty* NewProp_Controller = new(ReturnFunction, TEXT("Controller"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(Controller, MovePlayerController_eventMoveUndocked_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("MoveEvents"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/MovePlayerController.h"));
			MetaData->SetValue(NewProp_Controller, TEXT("ModuleRelativePath"), TEXT("Classes/MovePlayerController.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_AMovePlayerController_MoveUnplugged()
	{
		UClass* OuterClass=Z_Construct_UClass_AMovePlayerController();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(OuterClass, TEXT("MoveUnplugged"), RF_Public|RF_Transient|RF_Native) UFunction(FPostConstructInitializeProperties(), NULL, 0x08020800, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("MoveEvents"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/MovePlayerController.h"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_AMovePlayerController_NoRegister()
	{
		return AMovePlayerController::StaticClass();
	}
	UClass* Z_Construct_UClass_AMovePlayerController()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_APlayerController();
			Z_Construct_UPackage_MovePlugin();
			OuterClass = AMovePlayerController::StaticClass();
			UObjectForceRegistration(OuterClass);
			OuterClass->ClassFlags |= 0x00800284;

			OuterClass->LinkChild(Z_Construct_UFunction_AMovePlayerController_MoveAnyButtonPressed());
			OuterClass->LinkChild(Z_Construct_UFunction_AMovePlayerController_MoveB1Pressed());
			OuterClass->LinkChild(Z_Construct_UFunction_AMovePlayerController_MoveB1Released());
			OuterClass->LinkChild(Z_Construct_UFunction_AMovePlayerController_MoveB2Pressed());
			OuterClass->LinkChild(Z_Construct_UFunction_AMovePlayerController_MoveB2Released());
			OuterClass->LinkChild(Z_Construct_UFunction_AMovePlayerController_MoveB3Pressed());
			OuterClass->LinkChild(Z_Construct_UFunction_AMovePlayerController_MoveB3Released());
			OuterClass->LinkChild(Z_Construct_UFunction_AMovePlayerController_MoveB4Pressed());
			OuterClass->LinkChild(Z_Construct_UFunction_AMovePlayerController_MoveB4Released());
			OuterClass->LinkChild(Z_Construct_UFunction_AMovePlayerController_MoveControllerDisabled());
			OuterClass->LinkChild(Z_Construct_UFunction_AMovePlayerController_MoveControllerEnabled());
			OuterClass->LinkChild(Z_Construct_UFunction_AMovePlayerController_MoveControllerMoved());
			OuterClass->LinkChild(Z_Construct_UFunction_AMovePlayerController_MoveDocked());
			OuterClass->LinkChild(Z_Construct_UFunction_AMovePlayerController_MoveGetHistoricalData());
			OuterClass->LinkChild(Z_Construct_UFunction_AMovePlayerController_MoveGetLatestData());
			OuterClass->LinkChild(Z_Construct_UFunction_AMovePlayerController_MoveIsAvailable());
			OuterClass->LinkChild(Z_Construct_UFunction_AMovePlayerController_MovePluggedIn());
			OuterClass->LinkChild(Z_Construct_UFunction_AMovePlayerController_MoveStartPressed());
			OuterClass->LinkChild(Z_Construct_UFunction_AMovePlayerController_MoveStartReleased());
			OuterClass->LinkChild(Z_Construct_UFunction_AMovePlayerController_MoveTriggerChanged());
			OuterClass->LinkChild(Z_Construct_UFunction_AMovePlayerController_MoveTriggerPressed());
			OuterClass->LinkChild(Z_Construct_UFunction_AMovePlayerController_MoveTriggerReleased());
			OuterClass->LinkChild(Z_Construct_UFunction_AMovePlayerController_MoveUndocked());
			OuterClass->LinkChild(Z_Construct_UFunction_AMovePlayerController_MoveUnplugged());

			OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_AMovePlayerController_MoveAnyButtonPressed());
			OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_AMovePlayerController_MoveB1Pressed());
			OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_AMovePlayerController_MoveB1Released());
			OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_AMovePlayerController_MoveB2Pressed());
			OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_AMovePlayerController_MoveB2Released());
			OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_AMovePlayerController_MoveB3Pressed());
			OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_AMovePlayerController_MoveB3Released());
			OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_AMovePlayerController_MoveB4Pressed());
			OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_AMovePlayerController_MoveB4Released());
			OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_AMovePlayerController_MoveControllerDisabled());
			OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_AMovePlayerController_MoveControllerEnabled());
			OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_AMovePlayerController_MoveControllerMoved());
			OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_AMovePlayerController_MoveDocked());
			OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_AMovePlayerController_MoveGetHistoricalData());
			OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_AMovePlayerController_MoveGetLatestData());
			OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_AMovePlayerController_MoveIsAvailable());
			OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_AMovePlayerController_MovePluggedIn());
			OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_AMovePlayerController_MoveStartPressed());
			OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_AMovePlayerController_MoveStartReleased());
			OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_AMovePlayerController_MoveTriggerChanged());
			OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_AMovePlayerController_MoveTriggerPressed());
			OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_AMovePlayerController_MoveTriggerReleased());
			OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_AMovePlayerController_MoveUndocked());
			OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_AMovePlayerController_MoveUnplugged());
			OuterClass->ClassConfigName = FName(TEXT("Game"));
			OuterClass->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
			MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Collision Rendering Utilities|Transformation"));
			MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("MovePlayerController.h"));
			MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/MovePlayerController.h"));
#endif
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_AMovePlayerController(Z_Construct_UClass_AMovePlayerController);
	UFunction* Z_Construct_UFunction_AMovePluginActor_MoveAnyButtonPressed()
	{
		UClass* OuterClass=Z_Construct_UClass_AMovePluginActor();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(OuterClass, TEXT("MoveAnyButtonPressed"), RF_Public|RF_Transient|RF_Native) UFunction(FPostConstructInitializeProperties(), NULL, 0x08020800, 65535, sizeof(MovePluginActor_eventMoveAnyButtonPressed_Parms));
			UProperty* NewProp_Controller = new(ReturnFunction, TEXT("Controller"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(Controller, MovePluginActor_eventMoveAnyButtonPressed_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("MoveEvents"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/MovePluginActor.h"));
			MetaData->SetValue(NewProp_Controller, TEXT("ModuleRelativePath"), TEXT("Classes/MovePluginActor.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_AMovePluginActor_MoveB1Pressed()
	{
		UClass* OuterClass=Z_Construct_UClass_AMovePluginActor();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(OuterClass, TEXT("MoveB1Pressed"), RF_Public|RF_Transient|RF_Native) UFunction(FPostConstructInitializeProperties(), NULL, 0x08020800, 65535, sizeof(MovePluginActor_eventMoveB1Pressed_Parms));
			UProperty* NewProp_Controller = new(ReturnFunction, TEXT("Controller"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(Controller, MovePluginActor_eventMoveB1Pressed_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("MoveEvents"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/MovePluginActor.h"));
			MetaData->SetValue(NewProp_Controller, TEXT("ModuleRelativePath"), TEXT("Classes/MovePluginActor.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_AMovePluginActor_MoveB1Released()
	{
		UClass* OuterClass=Z_Construct_UClass_AMovePluginActor();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(OuterClass, TEXT("MoveB1Released"), RF_Public|RF_Transient|RF_Native) UFunction(FPostConstructInitializeProperties(), NULL, 0x08020800, 65535, sizeof(MovePluginActor_eventMoveB1Released_Parms));
			UProperty* NewProp_Controller = new(ReturnFunction, TEXT("Controller"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(Controller, MovePluginActor_eventMoveB1Released_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("MoveEvents"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/MovePluginActor.h"));
			MetaData->SetValue(NewProp_Controller, TEXT("ModuleRelativePath"), TEXT("Classes/MovePluginActor.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_AMovePluginActor_MoveB2Pressed()
	{
		UClass* OuterClass=Z_Construct_UClass_AMovePluginActor();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(OuterClass, TEXT("MoveB2Pressed"), RF_Public|RF_Transient|RF_Native) UFunction(FPostConstructInitializeProperties(), NULL, 0x08020800, 65535, sizeof(MovePluginActor_eventMoveB2Pressed_Parms));
			UProperty* NewProp_Controller = new(ReturnFunction, TEXT("Controller"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(Controller, MovePluginActor_eventMoveB2Pressed_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("MoveEvents"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/MovePluginActor.h"));
			MetaData->SetValue(NewProp_Controller, TEXT("ModuleRelativePath"), TEXT("Classes/MovePluginActor.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_AMovePluginActor_MoveB2Released()
	{
		UClass* OuterClass=Z_Construct_UClass_AMovePluginActor();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(OuterClass, TEXT("MoveB2Released"), RF_Public|RF_Transient|RF_Native) UFunction(FPostConstructInitializeProperties(), NULL, 0x08020800, 65535, sizeof(MovePluginActor_eventMoveB2Released_Parms));
			UProperty* NewProp_Controller = new(ReturnFunction, TEXT("Controller"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(Controller, MovePluginActor_eventMoveB2Released_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("MoveEvents"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/MovePluginActor.h"));
			MetaData->SetValue(NewProp_Controller, TEXT("ModuleRelativePath"), TEXT("Classes/MovePluginActor.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_AMovePluginActor_MoveB3Pressed()
	{
		UClass* OuterClass=Z_Construct_UClass_AMovePluginActor();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(OuterClass, TEXT("MoveB3Pressed"), RF_Public|RF_Transient|RF_Native) UFunction(FPostConstructInitializeProperties(), NULL, 0x08020800, 65535, sizeof(MovePluginActor_eventMoveB3Pressed_Parms));
			UProperty* NewProp_Controller = new(ReturnFunction, TEXT("Controller"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(Controller, MovePluginActor_eventMoveB3Pressed_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("MoveEvents"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/MovePluginActor.h"));
			MetaData->SetValue(NewProp_Controller, TEXT("ModuleRelativePath"), TEXT("Classes/MovePluginActor.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_AMovePluginActor_MoveB3Released()
	{
		UClass* OuterClass=Z_Construct_UClass_AMovePluginActor();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(OuterClass, TEXT("MoveB3Released"), RF_Public|RF_Transient|RF_Native) UFunction(FPostConstructInitializeProperties(), NULL, 0x08020800, 65535, sizeof(MovePluginActor_eventMoveB3Released_Parms));
			UProperty* NewProp_Controller = new(ReturnFunction, TEXT("Controller"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(Controller, MovePluginActor_eventMoveB3Released_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("MoveEvents"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/MovePluginActor.h"));
			MetaData->SetValue(NewProp_Controller, TEXT("ModuleRelativePath"), TEXT("Classes/MovePluginActor.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_AMovePluginActor_MoveB4Pressed()
	{
		UClass* OuterClass=Z_Construct_UClass_AMovePluginActor();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(OuterClass, TEXT("MoveB4Pressed"), RF_Public|RF_Transient|RF_Native) UFunction(FPostConstructInitializeProperties(), NULL, 0x08020800, 65535, sizeof(MovePluginActor_eventMoveB4Pressed_Parms));
			UProperty* NewProp_Controller = new(ReturnFunction, TEXT("Controller"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(Controller, MovePluginActor_eventMoveB4Pressed_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("MoveEvents"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/MovePluginActor.h"));
			MetaData->SetValue(NewProp_Controller, TEXT("ModuleRelativePath"), TEXT("Classes/MovePluginActor.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_AMovePluginActor_MoveB4Released()
	{
		UClass* OuterClass=Z_Construct_UClass_AMovePluginActor();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(OuterClass, TEXT("MoveB4Released"), RF_Public|RF_Transient|RF_Native) UFunction(FPostConstructInitializeProperties(), NULL, 0x08020800, 65535, sizeof(MovePluginActor_eventMoveB4Released_Parms));
			UProperty* NewProp_Controller = new(ReturnFunction, TEXT("Controller"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(Controller, MovePluginActor_eventMoveB4Released_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("MoveEvents"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/MovePluginActor.h"));
			MetaData->SetValue(NewProp_Controller, TEXT("ModuleRelativePath"), TEXT("Classes/MovePluginActor.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_AMovePluginActor_MoveControllerDisabled()
	{
		UClass* OuterClass=Z_Construct_UClass_AMovePluginActor();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(OuterClass, TEXT("MoveControllerDisabled"), RF_Public|RF_Transient|RF_Native) UFunction(FPostConstructInitializeProperties(), NULL, 0x08020800, 65535, sizeof(MovePluginActor_eventMoveControllerDisabled_Parms));
			UProperty* NewProp_Controller = new(ReturnFunction, TEXT("Controller"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(Controller, MovePluginActor_eventMoveControllerDisabled_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("MoveEvents"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/MovePluginActor.h"));
			MetaData->SetValue(NewProp_Controller, TEXT("ModuleRelativePath"), TEXT("Classes/MovePluginActor.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_AMovePluginActor_MoveControllerEnabled()
	{
		UClass* OuterClass=Z_Construct_UClass_AMovePluginActor();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(OuterClass, TEXT("MoveControllerEnabled"), RF_Public|RF_Transient|RF_Native) UFunction(FPostConstructInitializeProperties(), NULL, 0x08020800, 65535, sizeof(MovePluginActor_eventMoveControllerEnabled_Parms));
			UProperty* NewProp_Controller = new(ReturnFunction, TEXT("Controller"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(Controller, MovePluginActor_eventMoveControllerEnabled_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("MoveEvents"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/MovePluginActor.h"));
			MetaData->SetValue(NewProp_Controller, TEXT("ModuleRelativePath"), TEXT("Classes/MovePluginActor.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_AMovePluginActor_MoveControllerMoved()
	{
		UClass* OuterClass=Z_Construct_UClass_AMovePluginActor();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(OuterClass, TEXT("MoveControllerMoved"), RF_Public|RF_Transient|RF_Native) UFunction(FPostConstructInitializeProperties(), NULL, 0x08820800, 65535, sizeof(MovePluginActor_eventMoveControllerMoved_Parms));
			UProperty* NewProp_Rotation = new(ReturnFunction, TEXT("Rotation"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Rotation, MovePluginActor_eventMoveControllerMoved_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_UObject_FRotator());
			UProperty* NewProp_Acceleration = new(ReturnFunction, TEXT("Acceleration"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Acceleration, MovePluginActor_eventMoveControllerMoved_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_UObject_FVector());
			UProperty* NewProp_Velocity = new(ReturnFunction, TEXT("Velocity"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Velocity, MovePluginActor_eventMoveControllerMoved_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_UObject_FVector());
			UProperty* NewProp_Position = new(ReturnFunction, TEXT("Position"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Position, MovePluginActor_eventMoveControllerMoved_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_UObject_FVector());
			UProperty* NewProp_Controller = new(ReturnFunction, TEXT("Controller"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(Controller, MovePluginActor_eventMoveControllerMoved_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("MoveEvents"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/MovePluginActor.h"));
			MetaData->SetValue(NewProp_Rotation, TEXT("ModuleRelativePath"), TEXT("Classes/MovePluginActor.h"));
			MetaData->SetValue(NewProp_Acceleration, TEXT("ModuleRelativePath"), TEXT("Classes/MovePluginActor.h"));
			MetaData->SetValue(NewProp_Velocity, TEXT("ModuleRelativePath"), TEXT("Classes/MovePluginActor.h"));
			MetaData->SetValue(NewProp_Position, TEXT("ModuleRelativePath"), TEXT("Classes/MovePluginActor.h"));
			MetaData->SetValue(NewProp_Controller, TEXT("ModuleRelativePath"), TEXT("Classes/MovePluginActor.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_AMovePluginActor_MoveDocked()
	{
		UClass* OuterClass=Z_Construct_UClass_AMovePluginActor();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(OuterClass, TEXT("MoveDocked"), RF_Public|RF_Transient|RF_Native) UFunction(FPostConstructInitializeProperties(), NULL, 0x08020800, 65535, sizeof(MovePluginActor_eventMoveDocked_Parms));
			UProperty* NewProp_Controller = new(ReturnFunction, TEXT("Controller"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(Controller, MovePluginActor_eventMoveDocked_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("MoveEvents"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/MovePluginActor.h"));
			MetaData->SetValue(NewProp_Controller, TEXT("ModuleRelativePath"), TEXT("Classes/MovePluginActor.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_AMovePluginActor_MoveGetHistoricalData()
	{
		struct MovePluginActor_eventMoveGetHistoricalData_Parms
		{
			int32 Controller;
			int32 historyIndex;
			FVector Position;
			FVector Velocity;
			FVector Acceleration;
			FRotator Rotation;
			FVector2D joystick;
			int32 buttons;
			float trigger;
			bool docked;
			bool ReturnValue;
		};
		UClass* OuterClass=Z_Construct_UClass_AMovePluginActor();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(OuterClass, TEXT("MoveGetHistoricalData"), RF_Public|RF_Transient|RF_Native) UFunction(FPostConstructInitializeProperties(), NULL, 0x04C20401, 65535, sizeof(MovePluginActor_eventMoveGetHistoricalData_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, MovePluginActor_eventMoveGetHistoricalData_Parms, bool);
			UProperty* NewProp_ReturnValue = new(ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FPostConstructInitializeProperties(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, MovePluginActor_eventMoveGetHistoricalData_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, MovePluginActor_eventMoveGetHistoricalData_Parms), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(docked, MovePluginActor_eventMoveGetHistoricalData_Parms, bool);
			UProperty* NewProp_docked = new(ReturnFunction, TEXT("docked"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FPostConstructInitializeProperties(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(docked, MovePluginActor_eventMoveGetHistoricalData_Parms), 0x0000000000000180, CPP_BOOL_PROPERTY_BITMASK(docked, MovePluginActor_eventMoveGetHistoricalData_Parms), sizeof(bool), true);
			UProperty* NewProp_trigger = new(ReturnFunction, TEXT("trigger"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(trigger, MovePluginActor_eventMoveGetHistoricalData_Parms), 0x0000000000000180);
			UProperty* NewProp_buttons = new(ReturnFunction, TEXT("buttons"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(buttons, MovePluginActor_eventMoveGetHistoricalData_Parms), 0x0000000000000180);
			UProperty* NewProp_joystick = new(ReturnFunction, TEXT("joystick"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(joystick, MovePluginActor_eventMoveGetHistoricalData_Parms), 0x0000000000000180, Z_Construct_UScriptStruct_UObject_FVector2D());
			UProperty* NewProp_Rotation = new(ReturnFunction, TEXT("Rotation"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Rotation, MovePluginActor_eventMoveGetHistoricalData_Parms), 0x0000000000000180, Z_Construct_UScriptStruct_UObject_FRotator());
			UProperty* NewProp_Acceleration = new(ReturnFunction, TEXT("Acceleration"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Acceleration, MovePluginActor_eventMoveGetHistoricalData_Parms), 0x0000000000000180, Z_Construct_UScriptStruct_UObject_FVector());
			UProperty* NewProp_Velocity = new(ReturnFunction, TEXT("Velocity"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Velocity, MovePluginActor_eventMoveGetHistoricalData_Parms), 0x0000000000000180, Z_Construct_UScriptStruct_UObject_FVector());
			UProperty* NewProp_Position = new(ReturnFunction, TEXT("Position"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Position, MovePluginActor_eventMoveGetHistoricalData_Parms), 0x0000000000000180, Z_Construct_UScriptStruct_UObject_FVector());
			UProperty* NewProp_historyIndex = new(ReturnFunction, TEXT("historyIndex"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(historyIndex, MovePluginActor_eventMoveGetHistoricalData_Parms), 0x0000000000000080);
			UProperty* NewProp_Controller = new(ReturnFunction, TEXT("Controller"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(Controller, MovePluginActor_eventMoveGetHistoricalData_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("MoveFunctions"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/MovePluginActor.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Poll for historical data. Valid index is 0-9. Returns false if data is unavailable."));
			MetaData->SetValue(NewProp_ReturnValue, TEXT("ModuleRelativePath"), TEXT("Classes/MovePluginActor.h"));
			MetaData->SetValue(NewProp_docked, TEXT("ModuleRelativePath"), TEXT("Classes/MovePluginActor.h"));
			MetaData->SetValue(NewProp_trigger, TEXT("ModuleRelativePath"), TEXT("Classes/MovePluginActor.h"));
			MetaData->SetValue(NewProp_buttons, TEXT("ModuleRelativePath"), TEXT("Classes/MovePluginActor.h"));
			MetaData->SetValue(NewProp_joystick, TEXT("ModuleRelativePath"), TEXT("Classes/MovePluginActor.h"));
			MetaData->SetValue(NewProp_Rotation, TEXT("ModuleRelativePath"), TEXT("Classes/MovePluginActor.h"));
			MetaData->SetValue(NewProp_Acceleration, TEXT("ModuleRelativePath"), TEXT("Classes/MovePluginActor.h"));
			MetaData->SetValue(NewProp_Velocity, TEXT("ModuleRelativePath"), TEXT("Classes/MovePluginActor.h"));
			MetaData->SetValue(NewProp_Position, TEXT("ModuleRelativePath"), TEXT("Classes/MovePluginActor.h"));
			MetaData->SetValue(NewProp_historyIndex, TEXT("ModuleRelativePath"), TEXT("Classes/MovePluginActor.h"));
			MetaData->SetValue(NewProp_Controller, TEXT("ModuleRelativePath"), TEXT("Classes/MovePluginActor.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_AMovePluginActor_MoveGetLatestData()
	{
		struct MovePluginActor_eventMoveGetLatestData_Parms
		{
			int32 Controller;
			FVector Position;
			FVector Velocity;
			FVector Acceleration;
			FRotator Rotation;
			FVector2D joystick;
			int32 buttons;
			float trigger;
			bool docked;
			bool ReturnValue;
		};
		UClass* OuterClass=Z_Construct_UClass_AMovePluginActor();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(OuterClass, TEXT("MoveGetLatestData"), RF_Public|RF_Transient|RF_Native) UFunction(FPostConstructInitializeProperties(), NULL, 0x04C20401, 65535, sizeof(MovePluginActor_eventMoveGetLatestData_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, MovePluginActor_eventMoveGetLatestData_Parms, bool);
			UProperty* NewProp_ReturnValue = new(ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FPostConstructInitializeProperties(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, MovePluginActor_eventMoveGetLatestData_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, MovePluginActor_eventMoveGetLatestData_Parms), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(docked, MovePluginActor_eventMoveGetLatestData_Parms, bool);
			UProperty* NewProp_docked = new(ReturnFunction, TEXT("docked"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FPostConstructInitializeProperties(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(docked, MovePluginActor_eventMoveGetLatestData_Parms), 0x0000000000000180, CPP_BOOL_PROPERTY_BITMASK(docked, MovePluginActor_eventMoveGetLatestData_Parms), sizeof(bool), true);
			UProperty* NewProp_trigger = new(ReturnFunction, TEXT("trigger"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(trigger, MovePluginActor_eventMoveGetLatestData_Parms), 0x0000000000000180);
			UProperty* NewProp_buttons = new(ReturnFunction, TEXT("buttons"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(buttons, MovePluginActor_eventMoveGetLatestData_Parms), 0x0000000000000180);
			UProperty* NewProp_joystick = new(ReturnFunction, TEXT("joystick"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(joystick, MovePluginActor_eventMoveGetLatestData_Parms), 0x0000000000000180, Z_Construct_UScriptStruct_UObject_FVector2D());
			UProperty* NewProp_Rotation = new(ReturnFunction, TEXT("Rotation"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Rotation, MovePluginActor_eventMoveGetLatestData_Parms), 0x0000000000000180, Z_Construct_UScriptStruct_UObject_FRotator());
			UProperty* NewProp_Acceleration = new(ReturnFunction, TEXT("Acceleration"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Acceleration, MovePluginActor_eventMoveGetLatestData_Parms), 0x0000000000000180, Z_Construct_UScriptStruct_UObject_FVector());
			UProperty* NewProp_Velocity = new(ReturnFunction, TEXT("Velocity"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Velocity, MovePluginActor_eventMoveGetLatestData_Parms), 0x0000000000000180, Z_Construct_UScriptStruct_UObject_FVector());
			UProperty* NewProp_Position = new(ReturnFunction, TEXT("Position"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Position, MovePluginActor_eventMoveGetLatestData_Parms), 0x0000000000000180, Z_Construct_UScriptStruct_UObject_FVector());
			UProperty* NewProp_Controller = new(ReturnFunction, TEXT("Controller"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(Controller, MovePluginActor_eventMoveGetLatestData_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("MoveFunctions"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/MovePluginActor.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Poll for latest data. Returns false if data is unavailable."));
			MetaData->SetValue(NewProp_ReturnValue, TEXT("ModuleRelativePath"), TEXT("Classes/MovePluginActor.h"));
			MetaData->SetValue(NewProp_docked, TEXT("ModuleRelativePath"), TEXT("Classes/MovePluginActor.h"));
			MetaData->SetValue(NewProp_trigger, TEXT("ModuleRelativePath"), TEXT("Classes/MovePluginActor.h"));
			MetaData->SetValue(NewProp_buttons, TEXT("ModuleRelativePath"), TEXT("Classes/MovePluginActor.h"));
			MetaData->SetValue(NewProp_joystick, TEXT("ModuleRelativePath"), TEXT("Classes/MovePluginActor.h"));
			MetaData->SetValue(NewProp_Rotation, TEXT("ModuleRelativePath"), TEXT("Classes/MovePluginActor.h"));
			MetaData->SetValue(NewProp_Acceleration, TEXT("ModuleRelativePath"), TEXT("Classes/MovePluginActor.h"));
			MetaData->SetValue(NewProp_Velocity, TEXT("ModuleRelativePath"), TEXT("Classes/MovePluginActor.h"));
			MetaData->SetValue(NewProp_Position, TEXT("ModuleRelativePath"), TEXT("Classes/MovePluginActor.h"));
			MetaData->SetValue(NewProp_Controller, TEXT("ModuleRelativePath"), TEXT("Classes/MovePluginActor.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_AMovePluginActor_MoveIsAvailable()
	{
		struct MovePluginActor_eventMoveIsAvailable_Parms
		{
			bool ReturnValue;
		};
		UClass* OuterClass=Z_Construct_UClass_AMovePluginActor();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(OuterClass, TEXT("MoveIsAvailable"), RF_Public|RF_Transient|RF_Native) UFunction(FPostConstructInitializeProperties(), NULL, 0x04020401, 65535, sizeof(MovePluginActor_eventMoveIsAvailable_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, MovePluginActor_eventMoveIsAvailable_Parms, bool);
			UProperty* NewProp_ReturnValue = new(ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FPostConstructInitializeProperties(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, MovePluginActor_eventMoveIsAvailable_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, MovePluginActor_eventMoveIsAvailable_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("MoveFunctions"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/MovePluginActor.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Check if the Move is available/plugged in."));
			MetaData->SetValue(NewProp_ReturnValue, TEXT("ModuleRelativePath"), TEXT("Classes/MovePluginActor.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_AMovePluginActor_MovePluggedIn()
	{
		UClass* OuterClass=Z_Construct_UClass_AMovePluginActor();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(OuterClass, TEXT("MovePluggedIn"), RF_Public|RF_Transient|RF_Native) UFunction(FPostConstructInitializeProperties(), NULL, 0x08020800, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("MoveEvents"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/MovePluginActor.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Define blueprint events"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_AMovePluginActor_MoveStartPressed()
	{
		UClass* OuterClass=Z_Construct_UClass_AMovePluginActor();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(OuterClass, TEXT("MoveStartPressed"), RF_Public|RF_Transient|RF_Native) UFunction(FPostConstructInitializeProperties(), NULL, 0x08020800, 65535, sizeof(MovePluginActor_eventMoveStartPressed_Parms));
			UProperty* NewProp_Controller = new(ReturnFunction, TEXT("Controller"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(Controller, MovePluginActor_eventMoveStartPressed_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("MoveEvents"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/MovePluginActor.h"));
			MetaData->SetValue(NewProp_Controller, TEXT("ModuleRelativePath"), TEXT("Classes/MovePluginActor.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_AMovePluginActor_MoveStartReleased()
	{
		UClass* OuterClass=Z_Construct_UClass_AMovePluginActor();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(OuterClass, TEXT("MoveStartReleased"), RF_Public|RF_Transient|RF_Native) UFunction(FPostConstructInitializeProperties(), NULL, 0x08020800, 65535, sizeof(MovePluginActor_eventMoveStartReleased_Parms));
			UProperty* NewProp_Controller = new(ReturnFunction, TEXT("Controller"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(Controller, MovePluginActor_eventMoveStartReleased_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("MoveEvents"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/MovePluginActor.h"));
			MetaData->SetValue(NewProp_Controller, TEXT("ModuleRelativePath"), TEXT("Classes/MovePluginActor.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_AMovePluginActor_MoveTriggerChanged()
	{
		UClass* OuterClass=Z_Construct_UClass_AMovePluginActor();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(OuterClass, TEXT("MoveTriggerChanged"), RF_Public|RF_Transient|RF_Native) UFunction(FPostConstructInitializeProperties(), NULL, 0x08020800, 65535, sizeof(MovePluginActor_eventMoveTriggerChanged_Parms));
			UProperty* NewProp_Value = new(ReturnFunction, TEXT("Value"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Value, MovePluginActor_eventMoveTriggerChanged_Parms), 0x0000000000000080);
			UProperty* NewProp_Controller = new(ReturnFunction, TEXT("Controller"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(Controller, MovePluginActor_eventMoveTriggerChanged_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("MoveEvents"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/MovePluginActor.h"));
			MetaData->SetValue(NewProp_Value, TEXT("ModuleRelativePath"), TEXT("Classes/MovePluginActor.h"));
			MetaData->SetValue(NewProp_Controller, TEXT("ModuleRelativePath"), TEXT("Classes/MovePluginActor.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_AMovePluginActor_MoveTriggerPressed()
	{
		UClass* OuterClass=Z_Construct_UClass_AMovePluginActor();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(OuterClass, TEXT("MoveTriggerPressed"), RF_Public|RF_Transient|RF_Native) UFunction(FPostConstructInitializeProperties(), NULL, 0x08020800, 65535, sizeof(MovePluginActor_eventMoveTriggerPressed_Parms));
			UProperty* NewProp_Controller = new(ReturnFunction, TEXT("Controller"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(Controller, MovePluginActor_eventMoveTriggerPressed_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("MoveEvents"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/MovePluginActor.h"));
			MetaData->SetValue(NewProp_Controller, TEXT("ModuleRelativePath"), TEXT("Classes/MovePluginActor.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_AMovePluginActor_MoveTriggerReleased()
	{
		UClass* OuterClass=Z_Construct_UClass_AMovePluginActor();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(OuterClass, TEXT("MoveTriggerReleased"), RF_Public|RF_Transient|RF_Native) UFunction(FPostConstructInitializeProperties(), NULL, 0x08020800, 65535, sizeof(MovePluginActor_eventMoveTriggerReleased_Parms));
			UProperty* NewProp_Controller = new(ReturnFunction, TEXT("Controller"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(Controller, MovePluginActor_eventMoveTriggerReleased_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("MoveEvents"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/MovePluginActor.h"));
			MetaData->SetValue(NewProp_Controller, TEXT("ModuleRelativePath"), TEXT("Classes/MovePluginActor.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_AMovePluginActor_MoveUndocked()
	{
		UClass* OuterClass=Z_Construct_UClass_AMovePluginActor();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(OuterClass, TEXT("MoveUndocked"), RF_Public|RF_Transient|RF_Native) UFunction(FPostConstructInitializeProperties(), NULL, 0x08020800, 65535, sizeof(MovePluginActor_eventMoveUndocked_Parms));
			UProperty* NewProp_Controller = new(ReturnFunction, TEXT("Controller"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(Controller, MovePluginActor_eventMoveUndocked_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("MoveEvents"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/MovePluginActor.h"));
			MetaData->SetValue(NewProp_Controller, TEXT("ModuleRelativePath"), TEXT("Classes/MovePluginActor.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_AMovePluginActor_MoveUnplugged()
	{
		UClass* OuterClass=Z_Construct_UClass_AMovePluginActor();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(OuterClass, TEXT("MoveUnplugged"), RF_Public|RF_Transient|RF_Native) UFunction(FPostConstructInitializeProperties(), NULL, 0x08020800, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("MoveEvents"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/MovePluginActor.h"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_AMovePluginActor_NoRegister()
	{
		return AMovePluginActor::StaticClass();
	}
	UClass* Z_Construct_UClass_AMovePluginActor()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_AActor();
			Z_Construct_UPackage_MovePlugin();
			OuterClass = AMovePluginActor::StaticClass();
			UObjectForceRegistration(OuterClass);
			OuterClass->ClassFlags |= 0x00800080;

			OuterClass->LinkChild(Z_Construct_UFunction_AMovePluginActor_MoveAnyButtonPressed());
			OuterClass->LinkChild(Z_Construct_UFunction_AMovePluginActor_MoveB1Pressed());
			OuterClass->LinkChild(Z_Construct_UFunction_AMovePluginActor_MoveB1Released());
			OuterClass->LinkChild(Z_Construct_UFunction_AMovePluginActor_MoveB2Pressed());
			OuterClass->LinkChild(Z_Construct_UFunction_AMovePluginActor_MoveB2Released());
			OuterClass->LinkChild(Z_Construct_UFunction_AMovePluginActor_MoveB3Pressed());
			OuterClass->LinkChild(Z_Construct_UFunction_AMovePluginActor_MoveB3Released());
			OuterClass->LinkChild(Z_Construct_UFunction_AMovePluginActor_MoveB4Pressed());
			OuterClass->LinkChild(Z_Construct_UFunction_AMovePluginActor_MoveB4Released());
			OuterClass->LinkChild(Z_Construct_UFunction_AMovePluginActor_MoveControllerDisabled());
			OuterClass->LinkChild(Z_Construct_UFunction_AMovePluginActor_MoveControllerEnabled());
			OuterClass->LinkChild(Z_Construct_UFunction_AMovePluginActor_MoveControllerMoved());
			OuterClass->LinkChild(Z_Construct_UFunction_AMovePluginActor_MoveDocked());
			OuterClass->LinkChild(Z_Construct_UFunction_AMovePluginActor_MoveGetHistoricalData());
			OuterClass->LinkChild(Z_Construct_UFunction_AMovePluginActor_MoveGetLatestData());
			OuterClass->LinkChild(Z_Construct_UFunction_AMovePluginActor_MoveIsAvailable());
			OuterClass->LinkChild(Z_Construct_UFunction_AMovePluginActor_MovePluggedIn());
			OuterClass->LinkChild(Z_Construct_UFunction_AMovePluginActor_MoveStartPressed());
			OuterClass->LinkChild(Z_Construct_UFunction_AMovePluginActor_MoveStartReleased());
			OuterClass->LinkChild(Z_Construct_UFunction_AMovePluginActor_MoveTriggerChanged());
			OuterClass->LinkChild(Z_Construct_UFunction_AMovePluginActor_MoveTriggerPressed());
			OuterClass->LinkChild(Z_Construct_UFunction_AMovePluginActor_MoveTriggerReleased());
			OuterClass->LinkChild(Z_Construct_UFunction_AMovePluginActor_MoveUndocked());
			OuterClass->LinkChild(Z_Construct_UFunction_AMovePluginActor_MoveUnplugged());

			OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_AMovePluginActor_MoveAnyButtonPressed());
			OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_AMovePluginActor_MoveB1Pressed());
			OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_AMovePluginActor_MoveB1Released());
			OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_AMovePluginActor_MoveB2Pressed());
			OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_AMovePluginActor_MoveB2Released());
			OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_AMovePluginActor_MoveB3Pressed());
			OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_AMovePluginActor_MoveB3Released());
			OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_AMovePluginActor_MoveB4Pressed());
			OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_AMovePluginActor_MoveB4Released());
			OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_AMovePluginActor_MoveControllerDisabled());
			OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_AMovePluginActor_MoveControllerEnabled());
			OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_AMovePluginActor_MoveControllerMoved());
			OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_AMovePluginActor_MoveDocked());
			OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_AMovePluginActor_MoveGetHistoricalData());
			OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_AMovePluginActor_MoveGetLatestData());
			OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_AMovePluginActor_MoveIsAvailable());
			OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_AMovePluginActor_MovePluggedIn());
			OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_AMovePluginActor_MoveStartPressed());
			OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_AMovePluginActor_MoveStartReleased());
			OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_AMovePluginActor_MoveTriggerChanged());
			OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_AMovePluginActor_MoveTriggerPressed());
			OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_AMovePluginActor_MoveTriggerReleased());
			OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_AMovePluginActor_MoveUndocked());
			OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_AMovePluginActor_MoveUnplugged());
			OuterClass->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
			MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("MovePluginActor.h"));
			MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/MovePluginActor.h"));
			MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Placeable Actor Example that receives Move input,\noverride any delegate functions to receive notifications.\nCalling super is not necessary.\n\nNB: This is just an example actor, use the MovePlayerController for own\nclasses.\nCopy implementations to receive same functionality in a different class."));
#endif
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_AMovePluginActor(Z_Construct_UClass_AMovePluginActor);
	UPackage* Z_Construct_UPackage_MovePlugin()
	{
		static UPackage* ReturnPackage = NULL;
		if (!ReturnPackage)
		{
			ReturnPackage = CastChecked<UPackage>(StaticFindObjectFast(UPackage::StaticClass(), NULL, FName(TEXT("/Script/MovePlugin")), false, false));
			ReturnPackage->PackageFlags |= PKG_CompiledIn | 0x00000000;
			FGuid Guid;
			Guid.A = 0x2345D05D;
			Guid.B = 0x98B5EB2F;
			Guid.C = 0x00000000;
			Guid.D = 0x00000000;
			ReturnPackage->SetGuid(Guid);
		}
		return ReturnPackage;
	}
#endif

